@@@4	0	Keyword		class		class
@@@4	6	Identifier	MutableStack	MutableStack
@@@4	18	OpLess		<		<
@@@4	19	Identifier	E		E
@@@4	20	OpGreater	>		>
@@@4	21	LParen		(		(
@@@4	22	Keyword		vararg		vararg
@@@4	29	Identifier	items		items
@@@4	34	OpColon		:		:
@@@4	36	Identifier	E		E
@@@4	37	RParen		)		)
@@@4	39	LCurl		{		{
@@@6	2	Keyword		private		private
@@@6	10	Keyword		val		val
@@@6	14	Identifier	elements	elements
@@@6	23	OpAssign	=		=
@@@6	25	Identifier	items		items
@@@6	30	OpDot		.		.
@@@6	31	Identifier	toMutableList	toMutableList
@@@6	44	LParen		(		(
@@@6	45	RParen		)		)
@@@8	2	Keyword		fun		fun
@@@8	6	Identifier	push		push
@@@8	10	LParen		(		(
@@@8	11	Identifier	element		element
@@@8	18	OpColon		:		:
@@@8	20	Identifier	E		E
@@@8	21	RParen		)		)
@@@8	23	OpAssign	=		=
@@@8	25	Identifier	elements	elements
@@@8	33	OpDot		.		.
@@@8	34	Identifier	add		add
@@@8	37	LParen		(		(
@@@8	38	Identifier	element		element
@@@8	45	RParen		)		)
@@@10	2	Keyword		fun		fun
@@@10	6	Identifier	peek		peek
@@@10	10	LParen		(		(
@@@10	11	RParen		)		)
@@@10	12	OpColon		:		:
@@@10	14	Identifier	E		E
@@@10	16	OpAssign	=		=
@@@10	18	Identifier	elements	elements
@@@10	26	OpDot		.		.
@@@10	27	Identifier	last		last
@@@10	31	LParen		(		(
@@@10	32	RParen		)		)
@@@12	2	Keyword		fun		fun
@@@12	6	Identifier	pop		pop
@@@12	9	LParen		(		(
@@@12	10	RParen		)		)
@@@12	11	OpColon		:		:
@@@12	13	Identifier	E		E
@@@12	15	OpAssign	=		=
@@@12	17	Identifier	elements	elements
@@@12	25	OpDot		.		.
@@@12	26	Identifier	removeAt	removeAt
@@@12	34	LParen		(		(
@@@12	35	Identifier	elements	elements
@@@12	43	OpDot		.		.
@@@12	44	Identifier	size		size
@@@12	49	OpSub		-		-
@@@12	51	Byte		1		1
@@@12	52	RParen		)		)
@@@14	2	Keyword		fun		fun
@@@14	6	Identifier	isEmpty		isEmpty
@@@14	13	LParen		(		(
@@@14	14	RParen		)		)
@@@14	16	OpAssign	=		=
@@@14	18	Identifier	elements	elements
@@@14	26	OpDot		.		.
@@@14	27	Identifier	isEmpty		isEmpty
@@@14	34	LParen		(		(
@@@14	35	RParen		)		)
@@@16	2	Keyword		fun		fun
@@@16	6	Identifier	size		size
@@@16	10	LParen		(		(
@@@16	11	RParen		)		)
@@@16	13	OpAssign	=		=
@@@16	15	Identifier	elements	elements
@@@16	23	OpDot		.		.
@@@16	24	Identifier	size		size
@@@18	2	Keyword		override	override
@@@18	11	Keyword		fun		fun
@@@18	15	Identifier	toString	toString
@@@18	23	LParen		(		(
@@@18	24	RParen		)		)
@@@18	26	OpAssign	=		=
@@@18	28	String		"MutableStack(	MutableStack(
@@@18	42	StringExpr	${		${
@@@18	44	Identifier	elements	elements
@@@18	52	OpDot		.		.
@@@18	53	Identifier	joinToString	joinToString
@@@18	65	LParen		(		(
@@@18	66	RParen		)		)
@@@18	67	RCurl		}		}
@@@18	68	String		)"		)
@@@19	0	RCurl		}		}
@@@22	0	Keyword		fun		fun
@@@22	4	Identifier	main		main
@@@22	8	LParen		(		(
@@@22	9	RParen		)		)
@@@22	11	LCurl		{		{
@@@23	2	Keyword		val		val
@@@23	6	Identifier	stack		stack
@@@23	12	OpAssign	=		=
@@@23	14	Identifier	MutableStack	MutableStack
@@@23	26	LParen		(		(
@@@23	27	Double		0.62		0.62
@@@23	31	OpComma		,		,
@@@23	33	Double		3.14		3.14
@@@23	37	OpComma		,		,
@@@23	39	Double		2.7		2.7
@@@23	42	RParen		)		)
@@@24	2	Identifier	stack		stack
@@@24	7	OpDot		.		.
@@@24	8	Identifier	push		push
@@@24	12	LParen		(		(
@@@24	13	Double		9.87		9.87
@@@24	17	RParen		)		)
@@@25	2	Identifier	println		println
@@@25	9	LParen		(		(
@@@25	10	Identifier	stack		stack
@@@25	15	RParen		)		)
@@@27	2	Identifier	println		println
@@@27	9	LParen		(		(
@@@27	10	String		"peek(): 	peek(): 
@@@27	19	StringExpr	${		${
@@@27	21	Identifier	stack		stack
@@@27	26	OpDot		.		.
@@@27	27	Identifier	peek		peek
@@@27	31	LParen		(		(
@@@27	32	RParen		)		)
@@@27	33	RCurl		}		}
@@@27	34	String		"		
@@@27	35	RParen		)		)
@@@28	2	Identifier	println		println
@@@28	9	LParen		(		(
@@@28	10	Identifier	stack		stack
@@@28	15	RParen		)		)
@@@30	2	Keyword		for		for
@@@30	6	LParen		(		(
@@@30	7	Identifier	i		i
@@@30	9	Keyword		in		in
@@@30	12	Double		1		1
@@@30	13	OpDDot		..		..
@@@30	15	Identifier	stack		stack
@@@30	20	OpDot		.		.
@@@30	21	Identifier	size		size
@@@30	25	LParen		(		(
@@@30	26	RParen		)		)
@@@30	27	RParen		)		)
@@@30	29	LCurl		{		{
@@@31	4	Identifier	println		println
@@@31	11	LParen		(		(
@@@31	12	String		"pop(): 	pop(): 
@@@31	20	StringExpr	${		${
@@@31	22	Identifier	stack		stack
@@@31	27	OpDot		.		.
@@@31	28	Identifier	pop		pop
@@@31	31	LParen		(		(
@@@31	32	RParen		)		)
@@@31	33	RCurl		}		}
@@@31	34	String		"		
@@@31	35	RParen		)		)
@@@32	4	Identifier	println		println
@@@32	11	LParen		(		(
@@@32	12	Identifier	stack		stack
@@@32	17	RParen		)		)
@@@33	2	RCurl		}		}
@@@34	0	RCurl		}		}
